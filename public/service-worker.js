const CACHE_NAME = 'math-whiz-cache-v1';
// IMPORTANT: Update this list with all your critical assets.
// For assets loaded via CDN (esm.sh, tailwindcss, heroicons), their URLs should be added here.
// The service worker will try to cache these specific URLs.
const CACHE_ASSETS = [
  '/index.html', 
  '/manifest.json', 
  // '/index.tsx', // This should be the path to your main bundled JS file from the build, NOT the source .tsx file.
                  // For example, if your build outputs 'static/js/main.js', cache that.
                  // Keeping '/index.tsx' for now as per original, but it's likely incorrect for a build setup.
  '/favicon.ico', 
  // Android icons (paths are absolute from server root)
  '/AppImages/android/android-launchericon-48-48.png',
  '/AppImages/android/android-launchericon-72-72.png',
  '/AppImages/android/android-launchericon-144-144.png',
  '/AppImages/android/android-launchericon-192-192.png',
  '/AppImages/android/android-launchericon-512-512.png',
  // iOS icons (paths are absolute from server root)
  '/AppImages/ios/180.png',
  // Windows 11 icons (paths are absolute from server root)
  '/AppImages/windows11/Square44x44Logo.scale-100.png',
  '/AppImages/windows11/Square150x150Logo.scale-100.png',
  '/AppImages/windows11/Wide310x150Logo.scale-100.png',
  '/AppImages/windows11/LargeTile.scale-100.png',
  '/AppImages/windows11/SplashScreen.scale-100.png',
  '/AppImages/windows11/StoreLogo.scale-100.png',
  // CDN URLs - These must match exactly what's in your index.html
  'https://cdn.tailwindcss.com',
  'https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/hero-icons.min.css',
  'https://esm.sh/react-dom@^19.1.0/',
  'https://esm.sh/react@^19.1.0',
  'https://esm.sh/react@^19.1.0/' // Match variations if any
  // Add other assets like your main JavaScript bundle(s) and CSS file(s) generated by the build.
];

// Install service worker: Open cache and add core assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Service Worker: Caching core assets');
        return cache.addAll(CACHE_ASSETS.map(url => new Request(url, { cache: 'reload' })));
      })
      .catch(error => {
        console.error('Service Worker: Failed to cache core assets:', error);
      })
  );
  self.skipWaiting(); 
});

// Activate service worker: Clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Service Worker: Clearing old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  return self.clients.claim(); 
});

// Fetch event: Serve from cache if available, otherwise fetch from network
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request)
        .then(response => {
          if (response.ok) {
            const responseToCache = response.clone();
            caches.open(CACHE_NAME).then(cache => {
              cache.put(event.request, responseToCache);
            });
          }
          return response;
        })
        .catch(() => {
          return caches.match(event.request)
            .then(cachedResponse => {
              return cachedResponse || caches.match('/index.html');
            });
        })
    );
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        if (cachedResponse) {
          return cachedResponse; 
        }
        return fetch(event.request).then((networkResponse) => {
          if (networkResponse && networkResponse.status === 200) {
            const responseToCache = networkResponse.clone();
            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(event.request, responseToCache);
              });
          }
          return networkResponse;
        }).catch(error => {
          console.error('Service Worker: Fetch failed for:', event.request.url, error);
          // For non-navigational requests, you might not want a fallback HTML page.
          // Depending on the asset, failing might be acceptable or require a specific placeholder.
        });
      })
  );
});